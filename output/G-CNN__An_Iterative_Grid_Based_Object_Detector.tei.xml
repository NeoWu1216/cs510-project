<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /mnt/c/Users/pc/Desktop/cs510_proj/grobid-0.5.6/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">G-CNN: an Iterative Grid Based Object Detector</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mahyar</forename><surname>Najibi</surname></persName>
							<email>najibi@cs.umd.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Maryland</orgName>
								<address>
									<settlement>College Park</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohammad</forename><surname>Rastegari</surname></persName>
							<email>mrastega@cs.umd.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Maryland</orgName>
								<address>
									<settlement>College Park</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Larry</forename><forename type="middle">S</forename><surname>Davis</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Maryland</orgName>
								<address>
									<settlement>College Park</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">G-CNN: an Iterative Grid Based Object Detector</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.5.6" ident="GROBID" when="2019-12-02T16:40+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We introduce G-CNN, an object detection technique based on CNNs which works without proposal algorithms. G-CNN starts with a multi-scale grid of fixed bounding boxes. We train a regressor to move and scale elements of the grid towards objects iteratively. G-CNN models the problem of object detection as finding a path from a fixed grid to boxes tightly surrounding the objects. G-CNN with around 180 boxes in a multi-scale grid performs comparably to Fast R-CNN which uses around 2K bounding boxes generated with a proposal technique. This strategy makes detection faster by removing the object proposal stage as well as reducing the number of boxes to be processed.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Object detection, i.e. the problem of finding the locations of objects and determining their categories, is an intrinsically more challenging problem than classification since it includes the problem of object localization. The recent and popular trend in object detection uses a pre-processing step to find a candidate set of bounding-boxes that are likely to encompass the objects in the image. This step is referred to as the bounding-box proposal stage. The proposal techniques are a major computational bottleneck in state-of-theart object detectors <ref type="bibr" target="#b5">[6]</ref>. There have been attempts <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b13">14]</ref> to take this pre-processing stage out of the loop but they lead to performance degradations.</p><p>We show that without object proposals, we can achieve detection rates similar to state-of-the-art performance in object detection. Inspired by the iterative optimization in <ref type="bibr" target="#b1">[2]</ref>, we introduce an iterative algorithm that starts with a regularly sampled multi-scale grid of boxes in an image and updates the boxes to cover and classify objects. One step regression can-not handle the non-linearity of the mapping from a regular grid to boxes containing objects. Instead, we introduce a piecewise regression model that can learn this non-linear mapping through a few iterations. Each step in our algorithm deals with an easier regression problem than enforcing a direct mapping to actual target locations.  <ref type="figure" target="#fig_0">Figure 1</ref> depicts an overview of our algorithm. Initially, a multi-scale regular grid is superimposed on the image. For visualization we show a grid of non-overlapping, but in actuality the boxes do overlap. During training, each box is assigned to a ground-truth object by an assignment function based on intersection over union with respect to the ground truth boxes. Subsequently, at each training step, we regress boxes in the grid to move themselves towards the objects in the image to which they are assigned. At test time, for each box at each iteration, we obtain confidence scores over all categories and update its location with the regressor trained for the currently most probable class.</p><p>Our experimental results show that G-CNN achieves the state-of-the-art results obtained by Fast-RCNN on PASCAL VOC datasets without computing bounding-box proposals. Our method is about 5X faster than Fast R-CNN for detection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Related Work</head><p>Prior to CNN: For many years the problem of object detection was approached by techniques involving sliding window and classification <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b19">20]</ref>. Lampert et al. <ref type="bibr" target="#b11">[12]</ref> proposed an algorithm that goes beyond sliding windows and was guaranteed to reach the global optimal bounding box for an SVM-based classifier. Implicit Shape Models <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b14">15]</ref> eliminated sliding window search by relying on key-parts of an image to vote for a consistent bounding box that covers an object of interest. Deformable Part-based Models <ref type="bibr" target="#b3">[4]</ref> employed an idea similar to Implicit Shape Models, but proposed a direct optimization via latent variable models and used dynamic programming for fast inference. Several extension of DPMs emerged <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b0">1]</ref> until the remarkable improvements due to the convolutional neural networks was shown by <ref type="bibr" target="#b6">[7]</ref>.</p><p>CNN age: Deep convolutional neural networks (CNNs) are the state-of-the-art image classifiers and successful methods have been proposed based on these networks <ref type="bibr" target="#b10">[11]</ref>. Driven by their success in image classification, Girshick et al. proposed a multi-stage object detection system, known as R-CNN <ref type="bibr" target="#b6">[7]</ref>, which has attracted great attention due to its success on standard object detection datasets.</p><p>To address the localization problem, R-CNN relies on advances in object proposal techniques. Recently, proposal algorithms have been developed which avoid exhaustive search of image locations <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b23">24]</ref>. R-CNN uses these techniques to find bounding boxes which include an object with high probability. Next, a standard CNN is applied as feature extractor to each proposed bounding box and finally a classifier decides which object class is inside the box.</p><p>The main drawback of R-CNN is the redundancy in computing the features. Generally, around 2K proposals are generated; for each of them, the CNN is applied independently to extract features. To alleviate this problem, in SPP-Net <ref type="bibr" target="#b8">[9]</ref> the convolutional layers of the network are applied only once for each image. Then, the features of each region of interest are constructed by pooling the global features which lie in the spatial support of the region. However, learning is limited to fine-tuning the weights of fully connected layers. This drawback is addressed in Fast-RCNN <ref type="bibr" target="#b5">[6]</ref> in which all parameters are learned by back propagating the errors through the augmented pooling layer and packing all stages of the system, except generation of the object proposals, into one network.</p><p>The generation of object proposals, in CNN-based detection systems has been regarded as crucial. However, after proposing Fast-RCNN, this stage became the bottleneck. To make the number of object proposals smaller, Multibox <ref type="bibr" target="#b2">[3]</ref> introduced a proposal algorithm that outputs 800 bounding boxes using a CNN. This increases the size of the final layer of the CNN to 4096x800x5 and introduces a large set of additional parameters. Recently, Faster-RCNN <ref type="bibr" target="#b16">[17]</ref> was proposed, which decreased the number of parameters; however it needs to start from thousands of anchor points to propose 300 boxes.</p><p>In addition to classification, using a regressor for object detection has been also studied previously. Before proposing R-CNN, Szegedy et al. <ref type="bibr" target="#b18">[19]</ref>, modeled object detection as a regression problem and proposed a CNN-based regression system. More recently, AttentionNet <ref type="bibr" target="#b22">[23]</ref> is a single category detection that detects a single object inside an image using iterative regression. For multiple objects, the model is applied as a proposal algorithm to generate thousands of proposals and then is re-applied iteratively on each proposal for single category detection, which makes detection inefficient.</p><p>Although R-CNN and its variants attack the problem using a classification approach, they employ regression as a post-processing stage to refine the localization of the proposed bounding boxes.</p><p>The importance of the regression stage has not received as much attention as improving the object proposal stage for more accurate localization. The necessity of an object proposal algorithm in CNN based object detection systems has recently been challenged by Lenc et al. <ref type="bibr" target="#b13">[14]</ref>. Here, the proposals are replaced by a fixed set of bounding boxes. A set with a distribution derived from an object proposal method is selected using a clustering technique. However, for achieving comparable results, even more boxes need to be used compared to R-CNN. Another recent attempt for removing the proposal stage is Redmon et al. <ref type="bibr" target="#b15">[16]</ref> which conducts object detection in a single shot. However, the considerable gap between the best detection accuracy of these systems and systems with an explicit proposal stage suggests that the identification of good object proposals is critical to the success of these CNN based detection systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">G-CNN Object Detector</head><p>3.1. Network structure G-CNN trains a CNN to move and scale a fixed multiscale grid of bounding boxes towards objects. The network architecture for this regressor is shown in <ref type="figure">Figure 2</ref>. The backbone of this architecture can be any CNN network (e.g. AlexNet <ref type="bibr" target="#b10">[11]</ref>, VGG <ref type="bibr" target="#b17">[18]</ref>, etc.). As in Fast R-CNN and SPP-Net, a spatial region of interest (ROI) pooling layer is included in the architecture after the convolutional layers. Given the location information of each box, this layer computes the feature for the box by pooling the global features that lie inside the ROI. After the fully connected layers, the network ends with a linear regressor which outputs the change in the location and scale of each current bounding box, conditioned on the assumption that the box is moving towards an object of a class.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Training the network</head><p>Despite the similarities between the Fast R-CNN and G-CNN architectures, the training goals and approaches are different. G-CNN defines the problem of object detection as an iterative search in the space of all possible bounding boxes. G-CNN starts from a fixed multi-scale spatial pyramid of boxes. The goal of learning is to train the network so that it can move this set of initial boxes towards the objects inside the image in S steps iteratively. This iterative behaviour is essential for the success of the algo-  <ref type="figure">Figure 2</ref>: Structure of G-CNN regression network as well as an illustration of the idea behind the iterative training approach. The bounding box at each step is shown by the blue rectangle and its target is represented by a red rectangle. The network is trained to learn the path from the initial bounding box to its assigned target iteratively.</p><p>rithm. The reason is the highly non-linear search space of the problem. In other words, although learning how to linearly regress boxes to far away targets is unrealistic, learning small changes in the search space is tractable. Section 4.3 shows the importance of this step-wise training approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Loss function</head><p>G-CNN is an iterative method that moves bounding boxes towards object locations in S train steps. For this reason, the loss function is defined not only over the training samples but also over the iterative steps.</p><p>More formally, let B represent the four-dimensional space of all possible bounding boxes represented by the coordinates of their center, their width, and height. B i ∈ B is the i'th training bounding box. We use the superscript 1 ≤ s ≤ S train to denote the variables in step 's' of the G-CNN training, i.e. B s i is the position of the i'th training bounding box in step s.</p><p>During training, each bounding box with an IoU higher than a small threshold (0.2) is assigned to one of the ground truth bounding boxes inside its image. The following manyto-one function, A, is used for this assignment.</p><formula xml:id="formula_0">A(B s i ) = arg max G∈Gi IoU (B 1 i , G)<label>(1)</label></formula><p>where G i = {G i1 ∈ B, . . . , G in ∈ B}, is the set of ground truth bounding boxes which lie in the same image as B i . IoU is the intersection over union measure. Note that B 1 i represents the position of the i'th bounding box in the initial grid. In other words, for each training bounding box, the assignment is done in the initial training step and is not changed during the training.</p><p>Since regressing the initial training bounding boxes to their assigned ground truth bounding box can be highly nonlinear, we tackle the problem with a piece-wise regression approach. At step s, we solve the problem of regressing B s i to a target bounding box on the path from B s i to its assigned ground truth box. The target bounding box is moved step by step towards the assigned bounding box until it coincides with the assigned ground truth in step S train . The following function is used for defining the target bounding boxes at each step:</p><formula xml:id="formula_1">Φ(B s i , G * i , s) = B s i + G * i − B s i S train − s + 1<label>(2)</label></formula><p>where G * i = A(B s i ) represents the assigned ground truth bounding box to B s i . That is, at each step, the path from the current representation of the bounding box to the assigned ground truth is divided by the number of remaining steps and the target is defined to be one unit away from the current location.</p><p>G-CNN regression network outputs four values for each class, representing the parameterized change for regressing the bounding boxes assigned to that class. Following <ref type="bibr" target="#b6">[7]</ref>, a log-scale shift in width and height and a scale invariant translation is used to parametrize the relative change for mapping a bounding box to its assigned target. This parametrization is denoted by ∆(B s i , T s i ), where T s i is the assigned target to B s i computed by 2. So the loss function for G-CNN is defined as follows:</p><formula xml:id="formula_2">L({B i } N i=1 ) = Strain s=1 N i=1 I(B 1 i ∈ B BG )× (3) L reg (δ s i,li − ∆(B s i , Φ(B s i , A(B s i ), s)))</formula><p>where δ s i,li is the four-dimensional parameterized output for class l i representing the relative change in the representation of bounding box B s i . l i is the class label of the assigned ground truth bounding box to B i . L reg is the regression loss function. The smooth l 1 loss is used as defined in <ref type="bibr" target="#b5">[6]</ref>. I(.) is the indicator function which outputs one when its condition is satisfied and zero otherwise. B BG represents the set of all background bounding boxes.</p><p>During training, the representation of bounding box B i at step s, B s i , can be determined based on the actual output of the network by the following update formula:</p><formula xml:id="formula_3">B s i = B s−1 i + ∆ −1 (δ s−1 i,li )<label>(4)</label></formula><p>where ∆ −1 projects back the relative change in the position and scale from the defined parametrized space into B. However for calculating 4, the forward path of the network needs to be evaluated during training, making training inefficient. Instead, we use an approximate update by assuming that in step s, the network could learn the regressor for step s − 1 perfectly. As a result the update formula becomes</p><formula xml:id="formula_4">B s i = Φ(B s−1 i , G * i , s − 1). This update is depicted in Fig- ure 2.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Optimization</head><p>G-CNN optimizes the objective function in 3 with stochastic gradient descent. Since G-CNN tries to map the bounding boxes to their assigned ground-truth boxes in S train steps, we use a step-wised learning algorithm that optimizes Eq. 3 step by step.</p><p>To this end, we treat each of the bounding boxes in the initial grid together with its target in each of the steps as an independent training sample i.e. for each of the bounding boxes we have S train different training pairs. The algorithm first tries to optimize the loss function for the first step using N iter iterations. Then the training pairs of the second step are added to the training set and training continues step by step. By keeping the samples of the previous steps in the training set, we make sure that the network does not forget what was learned in the previous steps.</p><p>The samples for the earlier steps are part of the training set for a longer period of time. This choice is made since the earlier steps determine the global search direction and have a greater impact on the chance that the network will find the objects. On the other hand, the later steps only refine the bounding boxes to decrease localization error. Given that the search direction was correct and a good part of the object is now visible in the bounding box, the later steps solve a relatively easier problem.</p><p>Algorithm 1 is the method for generating training samples from each bounding box during each G-CNN step. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">G-CNN Test Network</head><p>The G-CNN regression network is trained to detect objects in an iterative fashion from a set of fixed bounding boxes in a multi-scale spatial grid. Likewise at test time, the set of bounding boxes is initialized to boxes inside a spatial pyramid grid. The regressor moves boxes towards objects using the classifier score to determine which class regressor to apply to update the box. The detection algorithm is presented in Algorithm 2.</p><p>During the detection phase, G-CNN is run S test times. However, like SPP-Net and Fast R-CNN there is no need to compute activations for all layers at every iteration. During test time, we decompose the network into global and regression parts as depicted in <ref type="figure">Figure.</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Experiments</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Experimental Setup</head><p>We report results on the Pascal VOC 2007 and Pascal VOC 2012 datasets. The performance of G-CNN is evaluated with AlexNet <ref type="bibr" target="#b10">[11]</ref> as a small and VGG16 <ref type="bibr" target="#b17">[18]</ref> as a very deep CNN structure. Following <ref type="bibr" target="#b6">[7]</ref>, we scale the shortest side of the image to 600 pixels not allowing the longer side of the image to be more than 1000 pixels. However, we always maintain the aspect ratio of the image, so the shortest side might include fewer than 600 pixels. Each model is Output B Stest+1 11: end procedure pre-trained with weights learned from the imagenet dataset.</p><p>In all the experiments, the G-CNN regression network is trained on an initial overlapping spatial pyramid with <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b9">10]</ref> scales (i.e. the bounding boxes in the coarsest level are (im width /2, im height /2) pixels etc.). During training, we used [0.9,0.8,0.7] overlap for each spatial scale respectively. By overlap of α we mean that the horizontal and vertical strides are width cell * (1 − α) and height cell * (1 − α) respectively. However, during test time, as will be shown in the following sections, overlaps of [0.7,0.5,0] (non-overlapping grid at the finest scale) is sufficient to obtain results comparable to Fast R-CNN. This leads to a grid of almost 180 initial boxes at test time. The G-CNN regression network is trained for S = 3 iterative steps. According to our experiments, no substantial improvement is achieved by training the network for a larger number of steps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Results on VOC datasets</head><p>The goal of G-CNN is to replace object proposals with a fixed multi-scale grid of boxes. To evaluate this, we fix the classifier in Algorithm 2 to the Fast R-CNN classifier and compare our results to the original Fast R-CNN with selective search proposal algorithm. <ref type="table" target="#tab_1">Table 1</ref> compares the mAP between G-CNN and Fast R-CNN on the VOC2007 test set. AlexNet is used as the basic CNN for all methods and models are trained on VOC2007 trainval set. G-CNN(3) is our method with three iterative steps during test time. In this version, we used the same grid overlaps used during training. This leads to a set of around 1500 initial boxes. G-CNN(5) is our method when we increase the number of steps at test time to 5 but reduce the overlaps to [0.7,0.5,0] (see <ref type="bibr">4.1)</ref>. This leads to around 180 boxes per image. According to the result, 180 boxes is enough for G-CNN to surpass the performance of Fast R-CNN, which uses around 2K selective search proposed boxes. In the remainder of this paper, we use G-CNN to refer to the G-CNN(5) version of our method. <ref type="table" target="#tab_2">Table 2</ref> shows mAP for various methods trained on VOC2007 trainval set and tested on VOC2007 test set. All methods used VGG16. The results validate our claim that G-CNN effectively moves its relatively small set of boxes toward objects. In other words, there seems to be no advantage to employing the larger set of selective search proposed boxes for detection in this dataset.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">VOC 2007 dataset</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">VOC 2012 dataset</head><p>The mAP for VOC2012 dataset is reported in <ref type="table" target="#tab_3">Table 3</ref>. All methods use VGG16 as their backbone. Methods are trained on trainval set and tested on the VOC2012 test set. The results of our method are obtained using the "comp4"  evaluation server with the parameters mentioned in 4.1 and the results of other methods are obtained from their papers. G-CNN obtains almost the same result as Fast R-CNN when both methods are trained on VOC 2012 trainval. Although in this table the best-reported mAP for Fast RCNN is slightly higher than G-CNN, it should be noted that unlike G-CNN, Fast R-CNN used the VOC 2007 test set as part of its training. It is worth noting that all methods except YOLO use proposal algorithms with high computational complexity. Compared to YOLO, which does not use object proposals, our method has a considerably higher mAP. To the best of our knowledge, this is the best-reported result among methods without an object proposal stage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Stepwise training matters</head><p>G-CNN uses a stepwise training algorithm and defines its loss function with this goal. In this section, we investigate the question of how important this stepwise training is and whether it can be replaced by a simpler, single step training approach.</p><p>To this end, we compare G-CNN with two simpler iterative approaches in table 4. First we consider the iterative version of Fast R-CNN (IF-RCNN). In this method, we use the regressor trained with Fast R-CNN in our iterative framework. Clearly, this regressor was not designed for grid-based object detection, but for small post-refinement of proposed objects.</p><p>Also, we consider a simpler algorithm for training the regressor for a grid-based detection system. Specifically, we collect all training tuples created in different steps of G-CNN and train our regressor in one step on this training set. So the only difference between G-CNN and this method is stepwise training. We call this method 1Step-Grid.</p><p>All methods are trained on VOC 2007 trainval set and tested on VOC 2007 test set and AlexNet is used as the core CNN structure. All methods are applied five iterations during test time to the same initial grid. <ref type="table">Table 4</ref> shows the comparison among the methods and <ref type="figure" target="#fig_4">Figure 4</ref> compares IF-RCNN and G-CNN for different numbers of iterations. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.">Analysis of the detection results</head><p>G-CNN removes the proposal stage from CNN-based object detection networks. Since the object proposal stage is known to be important for achieving good localization in CNN-based techniques, we compare the localization of G-CNN with Fast R-CNN.</p><p>To this end, we use the powerful tool of Hoeim et al. <ref type="bibr" target="#b9">[10]</ref>. <ref type="figure" target="#fig_5">Figure 5</ref> shows the distribution of top-ranked false positive rates for G-CNN, Fast R-CNN and the 1Step-Grid approach defined in the previous subsection. Comparing the distributions for G-CNN and Fast R-CNN, it is clear that removing the proposal stage from the system using our method did not hurt the localization and for the furniture class, it slightly improved the FPs due to localization error. Note that 1Step-Grid is trained on the same set of training tuples as G-CNN. However, the higher rate of false positives due to localization in 1Step-Grid is another indication of the importance of G-CNN's multi-step training strategy.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.">Qualitative results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6.">Detection run time</head><p>Here we compare the detection time of our algorithm with Fast R-CNN. For both methods, we used the truncated SVD technique proposed in <ref type="bibr" target="#b5">[6]</ref> and compressed fc6 and fc7 layers by keeping their top 1024 singular values and 256 singular values respectively. Timings are performed on a system with two K40 GPUs. The VGG16 network structure is used for both detection techniques and G-CNN uses the same classifier as Fast R-CNN.</p><p>We used Selective Search proposal to generate around 2K bounding boxes as suggested by <ref type="bibr" target="#b5">[6]</ref>. This stage takes 1830 ms to complete on average (selective search algorithm is not implemented in GPU mode). Fast R-CNN itself takes 220 ms on average for detecting objects. This leads to a total detection time of 2050 ms/im.</p><p>On the other hand, G-CNN does not need any object proposal stage. However, it iterates S=5 times with a grid of around 180 boxes. The global part of the network (See 3.4) takes 188 ms for each image. Each iteration of the segmentation network takes 35 ms. The classification network can be run in parallel. This would lead to a detection time of 363 ms/im (around 3 fps) in total.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Conclusion</head><p>We proposed G-CNN, a CNN-based object detection technique which models the problem of object detection as an iterative search in the space of all possible bounding boxes. Our model starts from a grid of fixed boxes regardless of the image content and migrates them to objects in the image. Since this search problem is nonlinear, we proposed a piece-wise regression model that iteratively moves boxes towards objects step by step. We showed how to learn the CNN architecture in a stepwise manner. The main contribution of the proposed technique is removing the object proposal stage from the detection system, which is the current bottleneck for CNN-based detection systems. G-CNN is 5X faster than "Fast R-CNN" and achieves comparable results to state-of-the-art detectors. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>This figure shows a schematic illustration of our iterative algorithm "G-CNN". It starts with a multi-scale regular grid over the image and iteratively updates the boxes in the grid. Each iteration pushes the boxes toward the objects of interest in the image while classifying their category.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>are fine-tuned from pre-trained models on ImageNet. Following<ref type="bibr" target="#b5">[6]</ref>, we fine-tune all layers except early convolutional layers (i.e. conv2 and up for AlexNet and conv3 1 and up for VGG16). During training, minibatches of two images are used. At each step of G-CNN, 64 training samples are selected randomly from all possible samples of the image at the corresponding step.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>3 .Figure 3 :</head><label>33</label><figDesc>The global net contains all convolutional layers of the network. On the other hand, the regression part consists of the fully connected layers and the regression weights. The input to the global net is the image and the forward path is computed only once for each image, outside the detection loop of Algorithm 2. Inside the detection loop, we only operate the regression network, which takes the outputs of the last layer of the global net as input and produces the bounding box modifications.This makes the computational cost of the algorithm com-Decomposition of the G-CNN network into global (upper) and regression part (lower) for detection after the training phase. Global part is run only once to extract global features but regression part is run at every iteration. This leads to a considerable speed up at test time.parable to Fast R-CNN (without considering the object proposal stage of Fast R-CNN). The global net is called once in both Fast R-CNN and G-CNN. Afterward, Fast R-CNN does N proposal forward calculations of the regression network (where N proposal is the number of generated object proposals for each image). G-CNN, on the other hand, does this forward calculation S test × N grid times (where N grid is the number of bounding boxes in the initial grid). In section 4.2, we show that for S test = 5 and N grid ∼ 180, G-CNN achieves comparable results to Fast R-CNN which uses N proposal ∼ 2K object proposals.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>B</head><label></label><figDesc>s+1 ← B s + ∆ −1 (δ s l )</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Mean average precision on VOC2007 test set vs. number of regression steps for G-CNN and IF-RCNN. Both methods use AlexNet and trained on VOC2007 trainval.The results show that step-wise training is crucial to the success of G-CNN. Even though the training samples are the same for G-CNN and 1Step-Grid, G-CNN outperforms it by a considerable margin.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>The distribution of top-ranked types of false positives (FPs). FPs are categorized into four different subcategories. The diagram shows the change in the distribution of these types when more FPs with decreasing scores are considered. Loc represents those FPs caused by poor localization (a duplicate detection or detection with IoU between 0.1 and 0.5). Sim shows those coming from confusion with one of the similar classes. BG stands for FPs on background and Oth represents other sources.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6</head><label>6</label><figDesc>shows some of the paths found by G-CNN in the space of bounding boxes starting from an initial grid with three scales. This example shows how G-CNN is capable of changing the position and scale of the boxes to fit them to different objects. The first four rows show successful examples while the last ones show failure examples.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>A sample of paths G-CNN found towards objects in the VOC2007 test set using AlexNet CNN structure. The first four rows show some success examples while the last rows show some failure cases. The most common failures of G-CNN can be categorized into the following sub-categories: false firing of the classifier on similar objects (first three failure cases in the fifth row where G-CNN fits into picture frames instead of monitors); bad localization due to similar objects with high overlaps (next three examples); false firing of the classifier on small boxes (last two cases in the sixth row); localization error due to hard pose of the object or small initial box compared to the actual size of the object (examples in the last row)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 1 :</head><label>1</label><figDesc>Average Precision on VOC 2007 test data. Both Fast R-CNN and our methods use AlexNet CNN structure. Models are trained using VOC 2007 trainval set.</figDesc><table>VOC 2007 
aero bike bird boat bottle bus 
car 
cat chair cow table dog horse mbike person plant sheep sofa train 
tv 
mAP 

FR-CNN [6] 
66.4 71.6 53.8 43.3 24.7 69.2 69.7 71.5 31.1 63.4 59.8 62.2 73.1 
65.9 
57 
26 
52 
56.4 67.8 57.7 57.1 
G-CNN(3) [ours] 63.2 68.9 51.7 41.8 27.2 69.1 67.7 69.2 31.8 60.6 60.8 63.9 75.5 
67.3 
54.9 
26.1 
51.2 57.2 69.6 56.8 56.7 
G-CNN(5) [ours] 
65 
68.5 
52 
44.9 24.5 69.3 69.6 68.9 34.6 60.3 58.1 64.6 75.1 
70.5 
55.2 
28.5 
50.7 56.8 70.2 56.1 57.2 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="true"><head>Table 2 :</head><label>2</label><figDesc>Average Precision on VOC 2007 Test data. All reported methods used VGG16. Models are trained using VOC 2007 trainval set.</figDesc><table>VOC 2007 
aero bike bird boat bottle bus 
car 
cat chair cow table dog horse mbike person plant sheep sofa train 
tv 
mAP 

SPPnet BB[9] 73.9 72.3 62.5 51.5 44.4 74.4 73.0 74.4 42.3 73.6 57.7 70.3 74.6 
74.3 
54.2 
34.0 
56.4 56.4 67.9 73.5 63.1 
R-CNN BB[8] 73.4 77.0 63.4 45.4 44.6 75.1 78.1 79.8 40.5 73.7 62.2 79.4 78.1 
73.1 
64.2 
35.6 
66.8 67.2 70.4 71.1 66.0 
FR-CNN[6] 
74.5 78.3 69.2 53.2 36.6 77.3 78.2 82.0 40.7 72.7 67.9 79.6 79.2 
73.0 
69.0 
30.1 
65.4 70.2 75.8 65.8 66.9 
G-CNN[ours] 
68.3 77.3 68.5 52.4 38.6 78.5 79.5 
81 
47.1 73.6 64.5 77.2 80.5 
75.8 
66.6 
34.3 
65.2 64.4 75.6 66.4 66.8 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 3 :</head><label>3</label><figDesc>Average Precision on VOC2012 test data. All reported methods used VGG16. The training set for each image is mentioned in the second column (12 stands for VOC2012 trainval, 07+12 represents the union of the trainval of VOC2007 and VOC2012, and 07++12 is the union of VOC 2007 trainval, VOC 2007 test and VOC 2012 trainval. The * emphasises that our method is trained on fewer data compared to FR-CNN trained on 07++12 training data)Table 4: Comparison among different strategies for grid-based object detection trained on VOC2007 trainval. All methods used AlexNet.</figDesc><table>VOC 2012 
train 
aero bike bird boat bottle bus 
car 
cat chair cow table dog horse mbike person plant sheep sofa train 
tv 
mAP 

R-CNN BB[8] 
12 
79.6 72.7 61.9 41.2 41.9 65.9 66.4 84.6 38.5 67.2 46.7 82.0 74.8 
76.0 
65.2 
35.6 
65.4 54.2 67.4 60.3 62.4 
YOLO[16] 
12 
71.5 64.2 54.1 35.3 23.3 61.0 54.4 78.1 35.3 56.9 40.9 72.4 68.6 
68.0 
62.5 
26.0 
51.9 48.8 68.7 47.2 54.5 
FR-CNN[6] 
12 
80.3 74.7 66.9 46.9 37.7 73.9 68.6 87.7 41.7 71.1 51.1 86.0 77.8 
79.8 
69.8 
32.1 
65.5 63.8 76.4 61.7 65.7 
FR-CNN[6] 
07++12 82.3 78.4 70.8 52.3 38.7 77.8 71.6 89.3 44.2 73.0 55.0 87.5 80.5 
80.8 
72.0 
35.1 
68.3 65.7 80.4 64.2 68.4 
G-CNN [ours] 
12 
82 
74 
68.2 49.5 38.9 74.4 68.9 85.4 40.6 70.9 
50 
85.5 
77 
77.4 
67.9 
33.7 
67.6 
60 
77.6 60.8 65.5 
G-CNN [ours] 
07+12 
82 
76.1 69.3 49.9 40.1 75.2 69.5 86.3 42.3 72.3 50.8 84.7 77.8 
77.2 
68 
38.1 
68.4 59.8 79.1 61.9 66.4* 

VOC 2007 
aero bike bird boat bottle bus 
car 
cat chair cow table dog horse mbike person plant sheep sofa train 
tv 
mAP 

IF-RCNN 
51.3 67.1 51.6 33.7 26.2 67.8 66.3 70.3 31.5 56.3 55.9 62.6 74.7 
64.6 
55.6 
22.2 
46.5 54.3 67.4 
55 
54.1 
1Step-Grid 
59.6 63.3 52.4 40.2 20.9 68.1 67.1 68.6 29.7 59.6 62.1 
63 
70.7 
64 
53.2 
23.4 
50.1 
56 
63.5 53.9 54.5 
G-CNN [ours] 
65 
68.5 
52 
44.9 24.5 69.3 69.6 68.9 34.6 60.3 58.1 64.6 75.1 
70.5 
55.2 
28.5 
50.7 56.8 70.2 56.1 57.2 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgment: This work was partially supported by grant N00014-10-1-0934 from ONR.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Object detection using stronglysupervised deformable part models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Azizpour</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Laptev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECCV</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="836" to="849" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Human pose estimation with iterative error feedback</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Carreira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Fragkiadaki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Malik</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1507.06550</idno>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Scalable object detection using deep neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Erhan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Szegedy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Toshev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Anguelov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="2147" to="2154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A discriminatively trained, multiscale, deformable part model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Felzenszwalb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mcallester</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ramanan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Cascade object detection with deformable part models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">F</forename><surname>Felzenszwalb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename><surname>Girshick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mcallester</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="2241" to="2248" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Fast r-cnn</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Girshick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page">7</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Rich feature hierarchies for accurate object detection and semantic segmentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Girshick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Donahue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Darrell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Malik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page">5</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Regionbased convolutional networks for accurate object detection and segmentation. Pattern Analysis and Machine Intelligence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Girshick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Donahue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Darrell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Malik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page">7</biblScope>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Spatial pyramid pooling in deep convolutional networks for visual recognition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECCV</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page">6</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Diagnosing error in object detectors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hoiem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chodpathumwan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Dai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECCV</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="340" to="353" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Imagenet classification with deep convolutional neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page">5</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Beyond sliding windows: Object localization by efficient subwindow search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">H</forename><surname>Lampert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">B</forename><surname>Blaschko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hofmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">An implicit shape model for combined object categorization and segmentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Leibe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Leonardis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Schiele</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lenc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vedaldi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>R-Cnn Minus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Corr</surname></persName>
		</author>
		<idno>abs/1506.06981</idno>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Object detection using a max-margin hough transform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Maji</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Malik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="1038" to="1045" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">You only look once: Unified, real-time object detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Redmon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Divvala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Girshick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Farhadi</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1506.02640</idno>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Faster r-cnn: Towards real-time object detection with region proposal networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Girshick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="91" to="99" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Very deep convolutional networks for large-scale image recognition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Simonyan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zisserman</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1409.1556</idno>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page">5</biblScope>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Deep neural networks for object detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Szegedy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Toshev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Erhan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="2553" to="2561" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Contextual models for object detection using boosted random fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Torralba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">P</forename><surname>Murphy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">T</forename><surname>Freeman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="1401" to="1408" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Selective search for object recognition. International journal of computer vision</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Uijlings</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">E</forename><surname>Van De Sande</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Gevers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">W</forename><surname>Smeulders</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="volume">104</biblScope>
			<biblScope unit="page" from="154" to="171" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Multiple kernels for object detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vedaldi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Gulshan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Varma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zisserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="606" to="613" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Attentionnet: Aggregating weak directions for accurate object detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Yoo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-Y</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename><surname>Paek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>So Kweon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="2659" to="2667" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Edge boxes: Locating object proposals from edges</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Zitnick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dollár</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECCV</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="391" to="405" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
