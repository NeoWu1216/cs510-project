<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /mnt/c/Users/pc/Desktop/cs510_proj/grobid-0.5.6/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Incremental Object Discovery in Time-Varying Image Collections</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Theodora</forename><surname>Kontogianni</surname></persName>
							<email>kontogianni@vision.rwth-aachen.de</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Vision Group</orgName>
								<orgName type="institution" key="instit1">Visual Computing Institute</orgName>
								<orgName type="institution" key="instit2">RWTH Aachen University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Mathias</surname></persName>
							<email>mathias@vision.rwth-aachen.de</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Vision Group</orgName>
								<orgName type="institution" key="instit1">Visual Computing Institute</orgName>
								<orgName type="institution" key="instit2">RWTH Aachen University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bastian</forename><surname>Leibe</surname></persName>
							<email>leibe@vision.rwth-aachen.de</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Vision Group</orgName>
								<orgName type="institution" key="instit1">Visual Computing Institute</orgName>
								<orgName type="institution" key="instit2">RWTH Aachen University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Incremental Object Discovery in Time-Varying Image Collections</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.5.6" ident="GROBID" when="2019-12-02T16:41+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this paper, we address the problem of object discovery in time-varying, large-scale image collections. A core part of our approach is a novel Limited Horizon Minimum Spanning Tree (LH-MST) structure that closely approximates the Minimum Spanning Tree at a small fraction of the latter's computational cost. Our proposed tree structure can be created in a local neighborhood of the matching graph during image retrieval and can be efficiently updated whenever the image database is extended. We show how the LH-MST can be used within both single-link hierarchical agglomerative clustering and the Iconoid Shift framework for object discovery in image collections, resulting in significant efficiency gains and making both approaches capable of incremental clustering with online updates. We evaluate our approach on a dataset of 500k images from the city of Paris and compare its results to the batch version of both clustering algorithms.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Social media platforms have become favorite storage and sharing sites for all kinds of images. A large part of those images are touristic photos, resulting in a dense image coverage of famous monuments and landmarks up to the scale of entire cities <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b1">2]</ref>. This has created a call for computer vision algorithms that can perform efficient object discovery <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b21">22]</ref>, clustering, and matching in image collections for applications such as large-scale 3D reconstruction <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b6">7]</ref>, scene summarization <ref type="bibr" target="#b18">[19]</ref>, automatic image annotation <ref type="bibr" target="#b7">[8]</ref>, or visual search <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b1">2]</ref>.</p><p>However, the content of large-scale image repositories is never static. Millions of images are added to such repositories each day, while others are withdrawn or deleted. Current object discovery algorithms <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b21">22]</ref> do not yet address this issue. They typically operate in a static setting, making it necessary to re-run the entire clustering process whenever the underlying image database changes, even though only a small part of the clusters may be affected by the changes. Image retrieval and recognition web services using those algorithms waste thousands of core hours of computation because of this.</p><p>Even leading providers of visual search engines such as Google are bound to rebuild the clustering from scratch every week [personal communication] due to changes in the image database. Currently this problem of dynamic database changes is not well researched in the community despite its large effect on practical applications.</p><p>In this paper, we address the image clustering and object discovery problem in an incremental setting. We propose a novel clustering method that allows for efficient reuse of the stored data. A key idea of this paper is that many clustering methods can be efficiently implemented with the help of a spanning tree. In order to enable incremental clustering, we therefore propose efficient techniques for incrementally constructing and updating the spanning tree. Because of the incremental updates, information about unaffected clusters can be preserved and only those clusters need to be recomputed that contain updated parts of the spanning tree.</p><p>At the core of our approach is a novel Limited Horizon Minimum Spanning Tree (LH-MST) data structure that closely approximates a Minimum Spanning Tree (MST), while being significantly faster to construct and to update whenever new images are added to the matching graph. The LH-MST can be used in any object discovery approach that operates on spanning trees, such as single-link clustering <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b23">24]</ref> or Iconoid-Shift mode estimation <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>. In contrast to a regular MST that always requires the full matching graph to be known a priori, an LH-MST can be computed starting from a local seed, making it suitable for local exploration of a matching graph through Query Expansion <ref type="bibr" target="#b4">[5]</ref>. We experimentally verify that in realistic use cases, the differences to a regular MST are minimal, making our algorithm an efficient alternative for parallel and distributed clustering applications.</p><p>We demonstrate our approach's practical feasibility for large-scale incremental object discovery by applying it to the Iconoid Shift (IS) object discovery approach <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>. As our results will show, replacing the MST by an LH-MST translates to a 5-fold improvement in runtime already during batch operation. In addition, we experimentally show that IS with LH-MST achieves stable incremental clustering results even when the image database is extended by a significant fraction.</p><p>In detail, this paper makes the following contributions. (1) We propose a novel LH-MST spanning tree structure, which approximates the MST and which can be incrementally updated very efficiently. (2) We show how this tree structure can be used for efficient approximative single-link clustering and how it can be incorporated into the Iconoid Shift approach <ref type="bibr" target="#b21">[22]</ref> for large-scale object discovery in image collections. (3) We verify experimentally that the resulting IS using LH-MST (or LH-IS) approach achieves very similar results as the offline version of IS, while being both considerably faster and capable of online updates of a significant fraction of the image database.</p><p>Related Work. Object discovery approaches aim at finding clusters of images showing the same object or landmark building in large image collections. The standard procedure for this is to apply local feature based matching techniques <ref type="bibr" target="#b13">[14]</ref> to build up a matching graph of images and to then subdivide the connected components of this matching graph into image clusters. A large range of clustering methods have been proposed for this step, including single-link hierarchical agglomerative clustering <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b23">24]</ref>, spectral clustering <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b8">9]</ref>, eigenvector centrality <ref type="bibr" target="#b9">[10]</ref>, spherical k-means <ref type="bibr" target="#b18">[19]</ref>, Kernel Vector Quantization <ref type="bibr" target="#b1">[2]</ref> and Medoid Shift mode estimation <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>. Because of the large size of the datasets to be mined, runtime efficiency and ease of parallelization are a prime concern.</p><p>In this paper, we focus on two classes of object discovery algorithms that have proven their worth in large-scale applications: single-link clustering <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b23">24]</ref> and Iconoid Shift <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>. Single-link clustering is directly related to the Minimum Spanning Tree (MST). Given the MST of a graph, the corresponding single-link clusters can be obtained by cutting all MST edges above a chosen distance threshold <ref type="bibr" target="#b16">[17]</ref>. Iconoid Shift <ref type="bibr" target="#b21">[22]</ref> uses Medoid Shift mode estimation with a special kernel in order to find images that have a locally maximal mutual homography overlap with their neighbors. Those images often correspond to central, iconic views of a landmark building, and the overlapping images under the kernel form the resulting cluster. In order to be able to apply the Medoid Shift formalism, the used distance measure needs to fulfill the triangle inequality. Since this is usually not the case for local-feature based matching scores, IS defines a transitive pairwise image distance measure that is computed over the edges of an MST. In practice, the MST construction step is responsible for a significant fraction of both clustering algorithms' runtime.</p><p>As shown in <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b2">3]</ref>, the MST of a graph with N nodes can be updated in O(N ) when a new node is added to the graph, which is simultaneously the lower bound for an exact update. This may not seem like much, but the key issue here is that such an exact update requires the full matching graph to be available on a single machine. For practical object discovery in large-scale image databases, even individual connected components of the matching graph may get so large that processing them on a single computing node becomes inefficient (in our experiments with 500k images, the largest connected component comprises &gt; 50k images). We therefore aim at an approximation of the MST that can be locally grown from a seed image, such that computation can be distributed over a computing cluster.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Clustering Methods for Object Discovery</head><p>In this paper we are primarily interested in performing efficient object discovery in large image collections. To that end, we propose a novel tree structure which can speedup MST based clustering algorithms and has the additional benefit of allowing incremental database updates without the need of rebuilding the entire database. In the following we will review two such clustering algorithms which rely on the creation of an MST. In the remainder of the paper we will then show that these algorithms benefit from our proposed MST approximation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">Single-Link Agglomerative Clustering</head><p>Single-Link Agglomerative Clustering is a widely used clustering method especially in the landmark discovery community <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b23">24]</ref>. It offers the advantage of creating clusters without any assumptions on their shape and the number of clusters. One of its drawbacks is that it is prone to long chain-like clusters that require rigorous postprocessing in order to achieve competitive results. Additionally it does not allow for incremental database updates, requiring a full re-computation after adding nodes.</p><p>Single-Link clustering can be performed in a bottomup fashion with each image starting as an individual cluster. Then the two closest clusters are iteratively joined until either the whole database is represented by a single cluster or a cut-off threshold θ on the between-cluster dis-</p><formula xml:id="formula_0">tance d(A, B) is reached. This cluster distance is defined as d(A, B) = min a∈A,b∈B d(a, b).</formula><p>An efficient O(N 2 ) implementation of Single-Link clustering can be obtained by first building the full matching graph and then computing its MST. Removing all edges above a certain threshold θ generates clusters of connected components. This dependency on the MST creation makes it an ideal candidate for MST approximation experiments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">Iconoid Shift</head><p>Iconoid Shift (IS) discovers landmark objects in image collections by searching for so-called iconic images. Starting from a set of seed images (typically obtained by Ge- <ref type="figure">Figure 1</ref>: Transitive overlap distance ometric MinHash <ref type="bibr" target="#b3">[4]</ref>), IS first builds up local matching graphs G by recursively applying image retrieval <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b4">5]</ref> with the seed image r as a query. The edges between images i and j are weighted by a distance measure d ovl (i, j) that quantifies the overlap region between the two directly connected images. In addition to those direct distances, IS proposes a transitive overlap distance t ovl (i, j) that propagates content overlaps between images that are not directly connected via homography chains. The algorithm adds nodes to G as long as the transitive distance to the root node r is below a cut-off point β (the so-called kernel radius). As a result of this local exploration, each seed image is connected to a set of similar images via the graph structure G.</p><formula xml:id="formula_1">d ovl (i, k, j 1 )) = 0.78 d ovl (i, k, j 2 )) = 0.71 i j 1 j 2 k</formula><p>On this graph, IS first builds up an MST and then computes the transitive distances t ovl (i, j) between all pairs of nodes (i, j) in G by propagating homography overlaps via the MST. It then uses the Medoid Shift (MS) algorithm <ref type="bibr" target="#b17">[18]</ref> to find the modes of the density implicitly defined by the transitive overlap distance, which correspond to the iconic images. Medoid Shift is a generalization of the Mean Shift mode estimation algorithm <ref type="bibr" target="#b5">[6]</ref> that operates on graphs. In each iteration, it computes the medoid of the graph nodes under its kernel (defined by the pairwise image distances) and then shifts the kernel window to this medoid. Whenever such a shift happens, the local matching graph is extended using the medoid as a new seed and the MST is recomputed. It iterates until convergence (see Algorithm 1).</p><p>Transitive overlap distance (t ovl ): The transitive overlap distance forms an important part of calculating the overlap over paths in the graph. It defines a distance for a pair of images (i,k) which are not directly connected in G, only through a path j of nodes. All directly connected images in G have corresponding homographies and bounding boxes enclosing the matching feature points. As shown in <ref type="figure">Figure 1</ref>, the transitive overlap distance between images i and k through images j 1 or j 2 is computed by projecting the matching bounding box from images i (blue box) and k (red box) to their common neighbor j 1 or j 2 . The overlap region between these two projections is found by intersecting the boxes (green box in j 1 and j 2 ) and back-projecting them to images i and k. Then the transitive overlap distance t ovl (i, k, j) is defined as 1 minus the minimum overlap of the projected boxes divided by the image area (see <ref type="bibr" target="#b21">[22]</ref>). <ref type="figure">Figure 1</ref> also shows that the path j influences the final distance between i and k, i.e. the overlap via j 1 is much larger than via j 2 . There are as many distances as paths from i to k. The choice of the spanning tree can therefore crucially influence the behavior of IS.</p><p>Caveats. The use of MS in a distance graph G requires the edge weights to form a metric. However due to the limited repeatability of the features used for image retrieval, the graph G may contain cycles which violate the triangu-</p><formula xml:id="formula_2">lar inequality for d ovl in G, i.e. d ovl (i, k) ≤ d ovl (i, j) + d ovl (j, k).</formula><p>Although d ovl is symmetric, the retrieval system is not. As such, it is not possible to use MS directly on G (at this point G is not fully connected). The spanning tree construction is necessary in order to circumvent this problem. By computing the MST on G, all potentially inconsistent cycles are removed, before the fully-connected, consistent graph G ′ is constructed by connecting nodes via transitive connections t ovl (see <ref type="bibr">Algorithm 1)</ref>. Through the definition of t ovl (see <ref type="bibr" target="#b21">[22]</ref>), the resulting graph fulfills the triangular inequality, making it possible to perform an iteration of MS.</p><p>When the mode shifts to a new node, the retrieval has to be performed again, as new nodes might now be within reach of the kernel distance, while others might drop out. This means that the MST has to be recomputed on the new local neighborhood. Although this new neighborhood is usually smaller than the full connected component, this step can still incur heavy computation. An efficient alternative to the MST creation can therefore result in significant speedups.</p><p>In summary, we see that, as for single-link clustering, the expensive calculation of the MST (O(N 2 ) in the number of tree nodes N ) is a major bottleneck of IS and it restricts its usability as an online algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Limited Horizon Minimum Spanning Tree</head><p>In this section we introduce a novel tree structure called Limited Horizon Minimum Spanning Tree (LH-MST). This tree structure (Section 3.1) is built during image retrieval (e.g. in Step 1 in Algorithm 1). It is considerably faster to compute than the regular MST (Section 3.1.1) and allows to incrementally add new nodes to an initial dataset instead of rebuilding the whole database when new imagery</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 1: Iconoid Shift Steps</head><p>Require: photo collection C, seed image s while s shifts to a new mode do</p><p>Step 1. Build graph G around s that connects similar images via distance d ovl . → Edge weights are not a metric.</p><p>Step 2. Create minimum spanning tree T of G to remove cycles.</p><p>Step 3. Construct fully connected G ′ from T by replacing missing edges with t ovl . → Edge weights are now a metric.</p><p>Step 4. Perform Medoid Shift in G ′ . Mode m is now the new s.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 2: Compute LH-MST</head><p>Require: root r, priority queue q update q update = ∅ push(q update , {edge(r, r), d ovl (r, r)}) while q update = ∅ do edge(p, n) = pop(q update ) if n / ∈ spanning tree T then add(edge(p, n)) to T ; children = retrieve(n) for c ∈ children do if φ(t ovl( r, c)) &lt; θ then push(q update , {edge(n, c), d ovl (n, c)}) return T is available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Offline Construction of LH-MST</head><p>Algorithm 2 shows the creation of our Limited Horizon Minimum Spanning Tree (LH-MST). The algorithm is based on the priority queue q update , which contains tuples of edges and their corresponding edge cost d ovl . The edges are directed from a parent node p to a child node n and the queue is sorted by the edge cost in ascending order. As before, we start with a seed, the root image r. The priority queue is initialized by a directed edge from p = r to n = r with weight equal to one. As long as the priority queue contains elements, we remove the first tuple {edge(p, n), d ovl (p, n)} from q update and perform image retrieval on image n. Newly retrieved images c are added to the q update (as {edge(n, c), d ovl (n, c)}) if they are within kernel distance to the root node and do not create cycles. A few iterations of the algorithm are visualized in <ref type="figure">Figure 2</ref>.</p><p>LH-MST is an MST approximation constructed in a greedy way. After iteration k the resulting spanning tree contains at most k nodes and has a maximal depth of k. The resulting spanning tree would be equivalent to the MST if the retrieval system were symmetric.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Complexity Analysis.</head><p>A major advantage of using LH-MST over MST to enforce the triangular inequality in G is speed. The LH-MST is constructed during retrieval and causes negligible maintenance overhead during the update.</p><p>Step 2 of the IS pipeline (see Algorithm 1) is not needed anymore. Saving the over-</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 3: Incremental Update LH-MST-Addition</head><p>Require: root r, priority queue q update Require: spanning tree T q update = ∅ for edge(p, n) ∈ T do push(q update , {edge(p, n), d ovl (p, n)}) while q update = ∅ do edge(p, n) = pop(q update ) if n / ∈ T then add(edge(p, n)) to T children = retrieve(n) for c ∈ children do if φ(t ovl( r, c)) &gt; θ then push(q update , {edge(n, c), d ovl (n, c)}) return T <ref type="figure">Figure 2</ref>: Three Steps of the Limited Horizon Minimum Spanning Tree. LH-MST k : The current tree (solid lines) contains k nodes, the update set new node candidates with their corresponding weights (dashed lines). LH-MST k+1 : the node with the minimal distance to any existing tree node (green line) is added to the tree; redundant edges are removed; the retrieval system finds new image candidates (within kernel distance) and adds them to update set k+1 . <ref type="figure">Figure 3</ref>: The incremental update of the LH-MST can result in slightly different trees. The red node belongs to set M , all other nodes to set N . In batch mode (middle), the red node would be retrieved during tree-construction with cost "2". The incremental update (right) starts with a pre-existing tree resulting in a slightly different path.</p><p>head for the MST construction (O(N 2 )) makes the proposed method significantly faster.</p><p>In contrast, one might suggest to use the basic IS algorithm as is and only replace the MST creation by a faster approximate MST algorithm <ref type="bibr" target="#b10">[11]</ref>. The resulting speed-up would be limited, as any faster MST algorithm still needs to build a full image graph first (not a spanning tree) and then compute the MST as a separate step.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Incremental Update of LH-MST</head><p>Performing any kind of clustering on databases with hundreds of thousands of images is very time consuming. Although we are able to speed up the tree creation, it might well happen that the image database has already been outdated before the clustering finished. Instead of collecting new data and re-running the clustering, the LH-MST is able to perform incremental updates. In this section we will describe the update procedure; Section 4.3 will then experimentally show its validity.</p><p>Algorithm 3 shows the incremental update of an LH-MST. The algorithm extends an already existing spanning tree LH-MST (N) consisting of N nodes with a set of new nodes M to create the spanning tree LH-MST (N+M) . The update procedure is similar to the initial construction of an LH-MST. Instead of starting from the root node r, we start with a complete tree built based on set N , and fill the priority queue with edges from this initial tree. The retrieval is performed in the order of the priority queue, but only retrieves images from the new set M . This adds new edges to the existing tree from N to M . As such, the resulting trees might slightly differ, as shown in <ref type="figure">Figure 3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Complexity Analysis</head><p>We consider the worst case scenario (in terms of complexity) of a fully connected retrieval graph, where each node upon retrieval returns all other nodes in the connected component. As complexity we consider the number of distance measure computations between nodes. Our full database has N elements.</p><p>Offline Version considers the construction of an LH-MST consisting of N nodes (including the seed s). In iteration k=1, there is only one node already in the LH-MST, the seed s and N -1 nodes to be considered for addition. Thus, N -1 distance computations between node pairs are needed. Each iteration of adding a node to the tree reduces the number of distance computations by one, resulting in a complexity of</p><formula xml:id="formula_3">compl offline = 1 + 2 + 3 + 4 + · · · + N − 1 (1) = (N ) · (N − 1) 2 (2)</formula><p>Online Update considers a pre-existing LH-MST with an initial set of nodes N 1 and updates the initial tree with a new set of nodes N 2 , where N 1 + N 2 = N . In iteration k=1 there are N 1 · N 2 distances computed between all the N 1 nodes of the initial spanning tree and all the N 2 nodes of the update set in order to pick a new edge to add in the spanning tree. Similar to the offline update, in each iteration elements from N 2 will be added to the tree resulting in a decrement of distance computations:</p><formula xml:id="formula_4">compl update = N 1 · N 2 + (N 2 ) · (N 2 − 1) 2 (3)</formula><p>As expected, the complexity of the offline version is larger than the complexity of incrementally updating the existing initial tree with the additional nodes by</p><formula xml:id="formula_5">compl offline − compl update = (N 1 ) · (N 1 − 1) 2 ,<label>(4)</label></formula><p>which is the number of distance computations to create the spanning tree with the initial set of nodes N 1 . Note that this analysis includes the effort for retrieval and distance computations. Without considering retrieval, the remaining effort of node addition is in O(1).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Experiments</head><p>In this paper we propose to replace MST by LH-MST in order to speed up computation and allow for efficient online updates. We will now use LH-MST to perform Single-Link Agglomerative clustering and Iconoid Shift as follows.</p><p>Limited Horizon Single-Link Clustering (LH-SL). In the tree construction we replace MST by LH-MST.</p><p>Limited Horizon Iconoid Shift (LH-IS). We replace steps 1 and 2 in Algorithm 1 by creating the tree T ′ directly.</p><p>LH-MST is one instance of many possible spanning tree alternatives that would also allow for fast creation and online updates. The alternatives could also be constructed during the retrieval step (similar to LH-MST) and thus would be faster than the original MST. We will show the advantages of LH-MST over several of such spanning tree baselines: BFT -Breadth First Spanning Tree (siblings with higher priority in queue), DFT -Depth First Spanning Tree (children with higher priority in queue), RAND -Random Spanning Tree (random order priority queue), SPT -Shortest Path Spanning Tree (queue sorted by shortest path to initial medoid).</p><p>All experiments are performed on the full 500k images of the Paris dataset <ref type="bibr" target="#b20">[21]</ref> collected from Flickr and Panoramio.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Evaluation of Single-Link Clustering</head><p>In Single-Link Clustering changing the cut-off threshold θ affects the number of resulting clusters starting from one cluster for the whole database to individual clusters for each element. Replacing the MST creation with LH-MST will likely result in a slightly different tree structure and therefore in different clusters. To assess the magnitude of this difference we compare the resulting trees by their editdistance E d as a function of θ: where T is the MST and S is the candidate tree. First the two full trees are compared based on the number of edges that need to be removed/added to convert the approximation (LH-MST) back into MST. We then keep track of the tree differences when changing θ. <ref type="figure" target="#fig_0">Figure 4</ref> shows the percentage of changed edges in the alternative trees (BFS,DFS,RAN,LH-MST) compared to the MST when varying θ. The LH-MST is the closest to the MST by a large margin.</p><formula xml:id="formula_6">E d (S, T ) = 1 2 (|{(i, j)|(i, j) ∈ S ∧ (i, j) ∈ T }| +|{(i, j)|(i, j) ∈ S ∧ (i, j) ∈ T }|)</formula><p>While this result shows that the approximation does not deviate by more than 0.027 percent for the original MST, it should be noted that the performed comparison is still slightly too strict. From a practical point of view, the underlying tree structure is irrelevant as long as the same images are clustered together by both methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Evaluation of Offline LH-IS</head><p>After using LH-MST for the case of Agglomerative Clustering, we now show its validity of performing Iconoid Shift with LH-MST called LH-IS. We compare our results to the ones of <ref type="bibr" target="#b21">[22]</ref>. In the following, we introduce the general setup and evaluation measures used for the evaluation.</p><p>Seeds. We use the seeds provided by the authors of <ref type="bibr" target="#b21">[22]</ref>: A seed group S with geometric min-hash <ref type="bibr" target="#b4">[5]</ref> using 5 min-Hash sketches of size 2 returns a total 10487 images. Duplicates are removed resulting in a set of 477 images. Empirically this limited number of seeds offers a good coverage of the database.</p><p>Medoid Shift kernel. We used a hinge kernel for the MS with a cut-off threshold of 0.9, which means that we allow images with at least 10% overlap to the support set of the Iconoid.</p><p>Evaluation measures glossary. In the following we compare various evaluation measures to the "ground truth", the set of medoids M M ST originating from the original (offline)   <ref type="table">Table 1</ref> summarizes the results of our evaluation of using different spanning trees in place of the MST. As it can be seen, using LH-IS provides the closest approximation of IS. The majority of clusters are represented with the same medoid (87% or 282 medoids). In 28 cases the algorithm converges to a different medoid which is part of the same cluster. <ref type="figure" target="#fig_3">Figures 7e and 7f</ref> show exemplary samples of the result of LH-IS and IS. Most picked medoids are the same, in case of divergence the images are still similar. This is also expressed by the low rank difference of 18.71. In 4 cases the medoid does not have a direct correspondence, i.e. the medoid is not part of the support set of MST. Such an example is shown in <ref type="figure" target="#fig_2">Figure 5</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Results of Offline LH-MST</head><p>Interestingly, the second most similar result to IS is achieved by RAN-IS, confirming that in principle any tree could perform well as long as it is not biased towards certain nodes. An important property of 'good' spanning trees is to allow IS to shift away from its initial seed. SPT-IS is Both algorithms are initialized with the same seed image (green border) that depicts the Eiffel Tower and Cleopatra's Needle but they converge to different medoids (red border). The MST's final cluster (b) shows only one of the landmarks (Eiffel Tower). As can be seen, the final medoid of LH-MST does not belong to the support set of the final medoid MST and visa versa. This is one of the rare cases where medoids cannot be matched (see <ref type="table">Table 1</ref>, column M U ).  performing worst with almost half of its initial seeds unable to shift to a better medoid. It is unsuitable by design as it is biased towards the root by keeping the edges that minimize the distance to the root.</p><formula xml:id="formula_7">LH-MST |M| |M A | |M O | |M U | |S| Rank |S sup | DB</formula><p>Summary. Compared to the original IS, LH-IS converges to exactly the same medoids in most cases (87% of the clusters); 97% of the medoids depict the same object with only minor viewpoint/color changes. (see supplementary material). For the result in <ref type="table">Table 1</ref>, the runtime of IS using LH-MST ( 1 day) is 5 times faster than using MST ( 5 days). LH-MST is therefore not only a suitable alternative in terms of quality but is also considerably faster than MST.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Evaluation of online LH-MST</head><p>As has been shown in the previous section, LH-MST is suitable for performing IS. Besides the speed advantage in an offline setting, LH-MST also offers the ability to be used with online updates of the image database (Section 3.2). <ref type="figure">Figure 6</ref>: Examples of IS shift sequences using LH-MST.</p><formula xml:id="formula_8">⇒ ⇒ ⇒ ⇒ ⇒ ⇒ ⇒ ⇒ ⇒ ⇒</formula><p>In the following, we compare the batch with the online version of LH-IS. For each experiment, we split the dataset into initial set and update set. After performing IS using LH-MST on this initial set, we add the remaining data via online update. All experiments are repeated 3 times to account for different random splits. To keep the results comparable, we enforce the seed images to be contained in the initial set. Two basic scenarios are considered: Scenario 1. The split is performed randomly. This scenario mirrors real world setting. Scenario 2. First, the dataset is split randomly. Second, images that represent medoids in offline LH-IS are shifted into the update set. As such no seed has converged to the "ground truth" cluster prior to the update. This setting gives further insights into the ability of our online version to perform useful shifts during the update step. <ref type="table" target="#tab_2">Table 3</ref> compares offline LH-IS to various settings of online LH-IS. For both scenarios, we report results using different ratios of images in the initial and update set (from 50/50 to 90/10).</p><p>As it can be seen from <ref type="table" target="#tab_2">Table 3</ref> the online version of LH-IS offers comparable results to the offline version. As expected, the selected medoids are closer with a smaller update set. Even in the case of a 50/50 split, many of the resulting medoids agree with offline LH-IS. Note that such a set-up is quite unrealistic considering the drastic change of the database (doubles in size). Yet, in Scenario 1 on average still 234 of the medoids agree with the offline LH-IS compared to 84 if no update is performed. For Scenario 2, although none of the correct medoids were in the initial database (M A = 0), more than 2/3 of them are recovered through the update (in the 70/30 split) confirming that our update step is able to add meaningful connections in the graph and to also shift medoids to their rightful place.</p><p>A detailed comparison between online LH-IS to original IS can be found in the supplementary material. <ref type="figure" target="#fig_3">Figure 7</ref> shows various example medoids resulting from different splits (Scenario 1). In some cases the medoids are different, but visually very similar images are selected (e.g. Mona Lisa in LH-IS, 70/30 split).</p><p>Summary. In the realistic scenario of a random initialization of 90% and an update of 10% using online LH-IS, 82% of the medoids are exactly the same as in offline LH-IS; 77% when compared to IS; 98% of the clusters depict the same object. The runtime of the LH-IS update is ∼3 hours, 8 times faster than re-computing LH-MST from scratch; 40 times faster than rerunning the original IS algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Conclusion</head><p>In this paper we introduced the Limited Horizon Minimum Spanning Tree (LH-MST), an approximation of the well known Minimum Spanning Tree (MST). In contrast to the MST, the LH-MST can be constructed much faster and has the additional property of allowing online updates of the tree structure, even for large changes in the image database. Yet various experiments have shown that this approximation is very close to the original algorithm. Our novel LH-MST can potentially be used in many algorithms which involve a costly Minimum Spanning Tree (MST) calculation. Finally, we demonstrated its applicability for two distinct methods of landmark discovery in large datasets: Single-Link Agglomerative and Iconoid Shift clustering.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 4 :</head><label>4</label><figDesc>The cumulative histogram of image distances in the cases of disagreeing tree edges.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>potential spanning tree are τ ∈ { MST, LH-MST, BFT, DFT, RAN, SPT } M τ the set of medoids resulting from method τ M A the set of medoids common between ground truth and method τ . M O the set of medoids of method τ that do not match the medoid selected in the ground truth. Still, the medoids are members of the ground truth cluster. How close they are to the ground truth is expressed by the Rank. M U the set of medoids of method τ that are not even part of any ground truth cluster. K the set of seeds for which the MS is stuck in initialization. S sup the cardinality of the final clusters Rank the smallest relative position (rank) that the medoids of method τ achieve in all ground truth clusters. The smaller the value of R d is, the closer the result is to the optimum. DB Cover the size of the database exploredTable 2: Glossary: Evaluation Measures version of IS. In Section 4.3 we compare to the online version and use the sets M LH−IS as "ground truth".</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 :</head><label>5</label><figDesc>Example iterations of IS using (a) LH-MST and (b) MST.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 7 :</head><label>7</label><figDesc>Examples of cluster centers for different version of LH-MST compared to original IS. With * we denote the online version of the algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 3 :</head><label>3</label><figDesc>Performance of the online version of the LH-MST compared to the offline version of the LH-MST.</figDesc><table></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgements. We thank Tobias Weyand for his invaluable input regarding the IS framework. This work is supported by the Google Faculty Research Award.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Building Rome in a Day</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Furukawa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Snavely</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Simon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Curless</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Seitz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Szeliski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Retrieving landmark and non-landmark images from community photo collections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Avrithis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kalantidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Tolias</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Spyrou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MM</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Algorithms for Updating Minimal Spanning Trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Chin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Houck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer and System Sciences</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="333" to="344" />
			<date type="published" when="1978" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Web scale image clusteringlarge scale discovery of spatially related images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Chum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Matas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PAMI</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="371" to="377" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Total Recall: Automatic Query Expansion with a Generative Feature Model for Object Retrieval</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Chum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Philbin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sivic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Isard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zisserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Mean shift: a robust approach toward feature space analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Comaniciu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Meer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<publisher>PAMI</publisher>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="603" to="619" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Building Rome on a Cloudless Day</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-M</forename><surname>Frahm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Fite-Georgel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gallup</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Raguram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-H</forename><surname>Jen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Dunn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Clipp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lazebnik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pollefeys</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECCV</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">I know what you did last summer: object-level autoannotation of holiday snaps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gammeter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bossard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Quack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Van Gool</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Image webs: Computing and exploiting connectivity in image collections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Heath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Gelfand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ovsjanikov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Aanjaneya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Guibas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Pagerank for product image search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Jing</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Baluja</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WWW</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A randomized linear-time algorithm to find minimum spanning trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Karger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">N</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Tarjan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="321" to="328" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Unsupervised Modeling of Object Categories Using Link Analysis Techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hebert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Modeling and Recognition of Landmark Image Collections Using Iconic Scene Graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Zach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lazebnik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-M</forename><surname>Frahm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECCV</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Object retrieval with large vocabularies and fast spatial matching</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Philbin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Chum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Isard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sivic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zisserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Object mining using a matching graph on very large image collections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Philbin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zisserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCVGIP</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">World-scale Mining of Objects and Events from Community Photo Collections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Quack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Leibe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Van Gool</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CIVR</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Hierarchical Clustering using the Minimum Spanning Tree</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Rohlf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Computer Journal</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="93" to="95" />
			<date type="published" when="1973" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Mode-seeking by Medoidshifts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">A</forename><surname>Sheikh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kanade</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Scene Summarization for Online Image Collections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Simon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Snavely</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Seitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">On Finding and Updating Spanning Trees and Shortest Paths</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Spira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Comput</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="375" to="380" />
			<date type="published" when="1975" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">An evaluation of two automatic landmark building discovery algorithms for city reconstruction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Weyand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hosang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Leibe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECCV Workshops</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Discovering Favorite Views of Popular Places with Iconoid Shift</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Weyand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Leibe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Hierarchical Iconoid Shift Discovering Details and Scene Structure with Hierarchical Iconoid Shift</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Weyand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Leibe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Tour the world: Building a web-scale landmark recognition engine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-T</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Adam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Buddemeier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bissacco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Brucher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T.-S</forename><surname>Chua</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Neven</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
