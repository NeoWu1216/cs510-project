{"version":3,"sources":["searchResList.js","App.js","serviceWorker.js","index.js"],"names":["searchStyles","makeStyles","theme","root","display","flexDirection","alignItems","searchRes","padding","spacing","width","marginBottom","SearchRes","props","classes","data","title","paragraph","React","useState","searchMode","searchText","Paper","className","Typography","variant","component","SearchResList","resList","map","x","prefix","useStyles","flexGrow","menuButton","marginRight","userButtons","marginLeft","searchBar","height","alignContent","formControl","color","paddingLeft","App","state","setState","searchResState","setSearchResState","AppBar","position","Toolbar","IconButton","aria-label","FormControl","Select","labelId","id","value","onChange","e","target","MenuItem","TextField","label","style","margin","placeholder","fullWidth","InputLabelProps","shrink","onKeyPress","ev","console","log","key","fetch","method","body","JSON","stringify","queryString","headers","then","res","json","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.007b1645.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst searchStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: \"center\",\r\n    \r\n  },\r\n  searchRes: {\r\n    padding: theme.spacing(3, 2),\r\n    width: '50vw',\r\n    marginBottom: \"5vh\",\r\n  },\r\n}))\r\n\r\n\r\nfunction SearchResList(props) {\r\n  const classes = searchStyles();\r\n  const resList = props.data;\r\n  return (<div className={classes.root}>\r\n    {resList.map(x => <SearchRes data={x} />)}\r\n  </div>)\r\n}\r\n\r\n\r\n\r\n\r\nfunction SearchRes(props) {\r\n  const classes = searchStyles();\r\n\r\n\r\n  const {data} = props\r\n  const {title, paragraph} = data\r\n\r\n  const [state, setState] = React.useState({\r\n    searchMode : '',\r\n    searchText : '',\r\n  })\r\n\r\n  return (\r\n    <Paper className={classes.searchRes}>\r\n      <Typography variant=\"h5\" component=\"h3\">\r\n        {title}\r\n      </Typography>\r\n      <Typography component=\"p\">\r\n        {paragraph}\r\n      </Typography>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default SearchResList;\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport SearchResList from './searchResList.js'\r\n\r\nvar prefix = \"cs510-project.herokuapp.com\"\r\nif (process.env.NODE_ENV !== 'production') {\r\n  prefix = \"127.0.0.1:8000\"\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  userButtons: {\r\n    marginLeft: \"auto\",\r\n    marginRight: -12\r\n  },\r\n  searchBar: {\r\n    marginLeft: \"5vw\",\r\n    marginRight: \"5vw\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    height: \"40vh\",\r\n    alignContent: \"center\"\r\n  },\r\n  formControl: {\r\n    width: \"20vw\",\r\n  },\r\n  resList: {\r\n    color : 'red',\r\n    paddingLeft: 200,\r\n    \r\n    // display: 'flex',\r\n    // height: '60vh',\r\n    // alignItems: 'center',\r\n    // justifyContent: 'center'\r\n  }\r\n}));\r\n\r\nfunction App() {\r\n  const resList = [\r\n    {title: 'Hello world', paragraph: 'Lopism Aifoei idie'},\r\n    {title: 'gg', paragraph: 'oigj'} \r\n  ];\r\n\r\n  const [state, setState] = React.useState({\r\n    searchMode : '',\r\n    searchText : '',\r\n  });\r\n\r\n  const [searchResState, setSearchResState] = React.useState([]);\r\n\r\n  function onMenuItemChange(e) {\r\n    setState({searchMode: e.target.value})\r\n  }\r\n\r\n  function onSearch() {\r\n      fetch(\"http://\"+prefix+\"/query_title_paragraph\",\r\n          {\r\n              method: 'POST',\r\n              body: JSON.stringify({queryString:'cv'}),\r\n              headers: {\r\n                  'Content-Type': 'application/json'\r\n              }\r\n          }\r\n      ).then(res => res.json()).then(json => setSearchResState(json))\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar variant=\"dense\">\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Computer Vision Paper Search\r\n          </Typography>\r\n          <span className={classes.userButtons}>\r\n            <IconButton color=\"inherit\" aria-label=\"Edit\">\r\n              <AccountCircle />\r\n            </IconButton>\r\n          </span>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.searchBar}>\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n          <Select\r\n              labelId=\"demo-simple-select-outlined-label\"\r\n              id=\"demo-simple-select-outlined\"\r\n              value={state.searchMode}\r\n              onChange={onMenuItemChange}\r\n          >\r\n            <MenuItem value=\"\">\r\n              <em>None</em>\r\n            </MenuItem>\r\n            <MenuItem value={10}>Search Papers</MenuItem>\r\n            <MenuItem value={20}>Search Paragraphs</MenuItem>\r\n            <MenuItem value={30}>Recommend Papers</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <TextField\r\n            id=\"outlined-full-width\"\r\n            label=\"CV papers to search\"\r\n            style={{ margin: 5 }}\r\n            placeholder=\"\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            variant=\"outlined\"\r\n            onKeyPress={(ev) => {\r\n                console.log(`Pressed keyCode ${ev.key}`);\r\n                if (ev.key === 'Enter') {\r\n                    // Do code here\r\n                    onSearch();\r\n                    ev.preventDefault();\r\n                }\r\n            }}\r\n        />\r\n      </div>\r\n      <SearchResList data={searchResState} className={classes.resList}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}